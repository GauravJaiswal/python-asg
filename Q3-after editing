import matplotlib.pyplot as plt
import numpy as np
class PolynomialSolver:
    epsilon, I1, I2, M, poly_coff, Interval = 0.0001, [], [], 0, [], [],
    def BisectionSearch(self, poly_coff, Interval):
        self.poly_coff = poly_coff
        self.Interval = Interval
        self.plot_the_curve()
        while (self.Interval[1]-self.Interval[0]) > self.epsilon:
            self.plot_Interval() 
            self.M = (self.Interval[1]+self.Interval[0])/2.0
            self.I1 = [self.Interval[0],self.M]
            self.I2 = [self.M,self.Interval[1]]
            if self.f(self.I1[0])*self.f(self.I1[1]) < 0:
                self.Interval = self.I1
            else:
                self.Interval = self.I2      
        plt.xlabel('x axis')
        plt.ylabel('y axis')
        plt.annotate('Approximate Root', xy = (self.Interval[0],5.0), xytext = (self.Interval[0],
        self.f(self.Interval[0])+20.0), arrowprops = dict(facecolor = 'black',shrink = 0.01))
        plt.show()
        return self.Interval            
    def f(self,x):
        sum = 0
        for i in range(len(self.poly_coff)):
            sum += self.poly_coff[i]*(x**i)
        return sum
    def plot_the_curve(self):
        x_cor = np.linspace(self.Interval[0], self.Interval[1], 100)
        plt.plot(x_cor,self.f(x_cor), color = '#123456', linewidth = 2.0)
    def plot_Interval(self):
        x_cor = np.array(self.Interval)
        plt.plot(x_cor,self.f(x_cor), 'o')
